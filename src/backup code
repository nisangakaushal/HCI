import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

public class Main extends JFrame {

    private DrawingPanel drawingPanel;

    public Main() {
        setTitle("Simple Paint");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        drawingPanel = new DrawingPanel();
        add(drawingPanel, BorderLayout.CENTER);

        JPanel toolPanel = new JPanel();
//        JButton pencilButton = new JButton("Pencil");
//        pencilButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.PENCIL));
        JButton lineButton = new JButton("Line");
        lineButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.LINE));
        JButton rectangleButton = new JButton("Rectangle");
        JButton circleButton = new JButton("Circle");
        circleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.CIRCLE));
        JButton triangleButton = new JButton("Triangle");
        triangleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.TRIANGLE));
        rectangleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.RECTANGLE));
        JButton colorButton = new JButton("Color");
        colorButton.addActionListener(e -> drawingPanel.setCurrentColor(JColorChooser.showDialog(this, "Choose Color", drawingPanel.getCurrentColor())));
//        toolPanel.add(pencilButton);
        toolPanel.add(lineButton);
        toolPanel.add(rectangleButton);
        toolPanel.add(circleButton);
        toolPanel.add(triangleButton);
        toolPanel.add(colorButton);
        add(toolPanel, BorderLayout.NORTH);

        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Main::new);
    }
}

class DrawingPanel extends JPanel {

    private BufferedImage canvas;
    private Graphics2D g2d;
    private DrawingTool currentTool;
    private Color currentColor;

    private Point startPoint;
    private Point endPoint;

    public DrawingPanel() {
        canvas = new BufferedImage(800, 600, BufferedImage.TYPE_INT_ARGB);
        g2d = canvas.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        clearCanvas();

        currentTool = DrawingTool.PENCIL;
        currentColor = Color.BLACK;

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                startPoint = e.getPoint();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                endPoint = e.getPoint();
                drawShape(startPoint, endPoint);
                startPoint = null;
                endPoint = null;
            }
        });

        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                endPoint = e.getPoint();
                repaint();
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawImage(canvas, 0, 0, this);

        if (startPoint != null && endPoint != null) {
            g2d.setColor(currentColor);
            drawShape(g2d, startPoint, endPoint);
        }
    }

    private void drawShape(Point start, Point end) {
        g2d.setColor(currentColor);
        switch (currentTool) {
            case PENCIL:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case LINE:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case RECTANGLE:
                int x = Math.min(start.x, end.x);
                int y = Math.min(start.y, end.y);
                int width = Math.abs(start.x - end.x);
                int height = Math.abs(start.y - end.y);
                g2d.drawRect(x, y, width, height);
                break;

            case CIRCLE:
                int radius = (int) Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
                g2d.drawOval(start.x - radius, start.y - radius, 2 * radius, 2 * radius);
                break;
            case TRIANGLE:
                int[] xPoints = {start.x, end.x, (start.x + end.x) / 2};
                int[] yPoints = {start.y, end.y, start.y};
                g2d.drawPolygon(xPoints, yPoints, 3);
                break;
        }
    }

    private void clearCanvas() {
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, getWidth(), getHeight());
        repaint();
    }

    public void setCurrentTool(DrawingTool tool) {
        currentTool = tool;
    }

    public void setCurrentColor(Color color) {
        currentColor = color;
    }

    public Color getCurrentColor() {
        return currentColor;
    }

    private void drawShape(Graphics2D g2d, Point start, Point end) {
        switch (currentTool) {
            case PENCIL:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case LINE:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case RECTANGLE:
                int x = Math.min(start.x, end.x);
                int y = Math.min(start.y, end.y);
                int width = Math.abs(start.x - end.x);
                int height = Math.abs(start.y - end.y);
                g2d.drawRect(x, y, width, height);
                break;

            case CIRCLE:
                int radius = (int) Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
                g2d.drawOval(start.x - radius, start.y - radius, 2 * radius, 2 * radius);
                break;
            case TRIANGLE:
                int[] xPoints = {start.x, end.x, (start.x + end.x) / 2};
                int[] yPoints = {start.y, end.y, start.y};
                g2d.drawPolygon(xPoints, yPoints, 3);
                break;

        }
    }
}

enum DrawingTool {
    PENCIL, LINE, RECTANGLE, CIRCLE, TRIANGLE
}



================================================================================================================================================================
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

public class Main extends JFrame {

    private DrawingPanel drawingPanel;

    public Main() {
        setTitle("Simple Paint");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        drawingPanel = new DrawingPanel();
        add(drawingPanel, BorderLayout.CENTER);

        JPanel toolPanel = new JPanel();
        JButton pencilButton = new JButton("Pencil");
        pencilButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.PENCIL));
        JButton lineButton = new JButton("Line");
        lineButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.LINE));
        JButton rectangleButton = new JButton("Rectangle");
        rectangleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.RECTANGLE));
        JButton circleButton = new JButton("Circle");
        circleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.CIRCLE));
        JButton triangleButton = new JButton("Triangle");
        triangleButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.TRIANGLE));
        JButton fillButton = new JButton("Fill");
        fillButton.addActionListener(e -> drawingPanel.setCurrentTool(DrawingTool.FILL));
        JButton colorButton = new JButton("Color");
        colorButton.addActionListener(e -> drawingPanel.setCurrentColor(JColorChooser.showDialog(this, "Choose Color", drawingPanel.getCurrentColor())));

        toolPanel.add(pencilButton);
        toolPanel.add(lineButton);
        toolPanel.add(rectangleButton);
        toolPanel.add(circleButton);
        toolPanel.add(triangleButton);
        toolPanel.add(fillButton);
        toolPanel.add(colorButton);
        add(toolPanel, BorderLayout.NORTH);

        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Main::new);
    }
}

class DrawingPanel extends JPanel {

    private BufferedImage canvas;
    private Graphics2D g2d;
    private DrawingTool currentTool;
    private Color currentColor;

    private Point startPoint;
    private Point endPoint;

    public DrawingPanel() {
        canvas = new BufferedImage(800, 600, BufferedImage.TYPE_INT_ARGB);
        g2d = canvas.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        clearCanvas();

        currentTool = DrawingTool.PENCIL;
        currentColor = Color.BLACK;

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                startPoint = e.getPoint();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                endPoint = e.getPoint();
                drawShape(startPoint, endPoint);
                startPoint = null;
                endPoint = null;
            }
        });

        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                endPoint = e.getPoint();
                repaint();
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawImage(canvas, 0, 0, this);

        if (startPoint != null && endPoint != null) {
            g2d.setColor(currentColor);
            drawShape(g2d, startPoint, endPoint);
        }
    }

    private void drawShape(Graphics2D g2d, Point start, Point end) {
        switch (currentTool) {
            case PENCIL:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case LINE:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case RECTANGLE:
                int x = Math.min(start.x, end.x);
                int y = Math.min(start.y, end.y);
                int width = Math.abs(start.x - end.x);
                int height = Math.abs(start.y - end.y);
                g2d.drawRect(x, y, width, height);
                break;
            case CIRCLE:
                int radius = (int) Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
                g2d.drawOval(start.x - radius, start.y - radius, 2 * radius, 2 * radius);
                break;
            case TRIANGLE:
                int[] xPoints = {start.x, end.x, (start.x + end.x) / 2};
                int[] yPoints = {start.y, end.y, start.y};
                g2d.drawPolygon(xPoints, yPoints, 3);
                break;
//            case FILL:
//                fillShape(g2d, end);
//                break;
        }
    }

    private void drawShape(Point start, Point end) {
        g2d.setColor(currentColor);
        switch (currentTool) {
            case PENCIL:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case LINE:
                g2d.drawLine(start.x, start.y, end.x, end.y);
                break;
            case RECTANGLE:
                int x = Math.min(start.x, end.x);
                int y = Math.min(start.y, end.y);
                int width = Math.abs(start.x - end.x);
                int height = Math.abs(start.y - end.y);
                g2d.drawRect(x, y, width, height);
                break;
            case CIRCLE:
                int radius = (int) Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
                g2d.drawOval(start.x - radius, start.y - radius, 2 * radius, 2 * radius);
                break;
            case TRIANGLE:
                int[] xPoints = {start.x, end.x, (start.x + end.x) / 2};
                int[] yPoints = {start.y, end.y, start.y};
                g2d.drawPolygon(xPoints, yPoints, 3);
                break;
            case FILL:
                fillShape(g2d, end);
                break;
        }
    }


    private void fillShape(Graphics2D g2d, Point point) {
        g2d.setColor(currentColor);
        switch (currentTool) {
            case RECTANGLE:
                g2d.fillRect(0, 0, getWidth(), getHeight());
                break;
            case CIRCLE:
                int radius = (int) Math.sqrt(Math.pow(point.x - startPoint.x, 2) + Math.pow(point.y - startPoint.y, 2));
                g2d.fillOval(startPoint.x - radius, startPoint.y - radius, 2 * radius, 2 * radius);
                break;
            case TRIANGLE:
                int[] xPoints = {startPoint.x, point.x, (startPoint.x + point.x) / 2};
                int[] yPoints = {startPoint.y, point.y, startPoint.y};
                g2d.fillPolygon(xPoints, yPoints, 3);
                break;
        }
    }

    private void clearCanvas() {
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, getWidth(), getHeight());
        repaint();
    }

    public void setCurrentTool(DrawingTool tool) {
        currentTool = tool;
    }

    public void setCurrentColor(Color color) {
        currentColor = color;
    }

    public Color getCurrentColor() {
        return currentColor;
    }
}

enum DrawingTool {
    PENCIL, LINE, RECTANGLE, CIRCLE, TRIANGLE, FILL
}

